SHELL := /bin/bash

clean: # Delete the files generated by colcon build
	rm -rf build/
	rm -rf install/
	rm -rf log/

colcon-build: # Build all the packages in Release mode (with debug symbols)
	colcon build  --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo

colcon-build-debug: # Build all the packages in full Debug mode
	colcon build  --cmake-args -DCMAKE_BUILD_TYPE=Debug

colcon-build-sym: # Build a specific package with symlink-install option and then source the environment. Must build the package without symlink flag before using this.  Append PACKAGE=package_name.
	colcon build --packages-select heavy_publish_py --symlink-install
	source install/setup.bash

lint: ## Format all files
	pre-commit run --all-files

ROS2_IMAGE ?= ros2_environment
build: ## Build the main docker image
	docker build -f docker/ros2_environment.dockerfile -t ${ROS2_IMAGE} .

XML ?= fastdds_udp.xml
# These commands are for the host container to run different test scenarios

configs: build ## List all available fastdds config files
	docker run --entrypoint= --network=host --ipc=host -t ${ROS2_IMAGE} /bin/bash -c "echo 'XML=<file>' ; ls -al /workspace/config | grep xml | rev | cut -d' ' -f1 | rev "

publish-heavy: build ## Publish large topics at 10fps
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML} -t ${ROS2_IMAGE} "ros2 launch --noninteractive scenarios_py heavy_pub.launch.py fps:=10"

publish-qos: build ## Publish light topics every 10 seconds (to test QoS behavior)
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML}  -t ${ROS2_IMAGE} "ros2 launch --noninteractive scenarios_py qos_pub.launch.py period_sec:=10"

publish-all: build ## Run all nodes
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML}  -t ${ROS2_IMAGE} "ros2 launch --noninteractive scenarios_py all.launch.py"

topic-list: build ## List all topics visible
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML} -t ${ROS2_IMAGE}  "ros2 topic list"

topic-hz-heavy: build ## Output topic hz 
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML} -t ${ROS2_IMAGE}  "ros2 topic hz /heavy/image1000"

topic-echo-qos: build ## Echo messages of transient_local_d3 topic
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML} -t ${ROS2_IMAGE}  "ros2 topic echo /qos/transient_local_d3"

service-list: build ## List all topics visible
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML} -t ${ROS2_IMAGE}  "ros2 service list"

rviz: build ## Rviz display
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML} -e DISPLAY=$(DISPLAY) -v "/tmp/.X11-unix:/tmp/.X11-unix" -t ${ROS2_IMAGE} "ros2 run rviz2 rviz2 -d config/default.rviz"

call-service: ## Call a service
	docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/${XML} -t ${ROS2_IMAGE} "ros2 service call  /service_node/reentrant/run_fake_task playground_interfaces/srv/RunFakeTask '{duration_sec: 1}'"

tshark-rtps: ## Run a tshark command to capture rtps traffic
	sudo tshark -i any -Y "rtps" -q -z io,stat,1,"rtps"

tshark: ## Run a tshark command to capture all traffic
	sudo tshark -i any  -q -z io,stat,1

print: ## Print the docker run command to run a custom command manually
	@echo "docker run --network=host --ipc=host  -e FASTRTPS_DEFAULT_PROFILES_FILE=/workspace/config/fastdds_udp.xml -t  ${ROS2_IMAGE} \"ros2 topic list\""

#################################################################################
# Self Documenting Commands                                                     #
#################################################################################
# Inspired by <http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html>

.DEFAULT_GOAL := help

.PHONY: help build buildd

help:  ## Show this help.
	@recipe_max_length=`grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
	awk '{print length($$1)}' | sort -nr | head -1`; \
	grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
	sort | awk -v recipe_max_length=$$recipe_max_length 'BEGIN {FS = ":.*?## "}; \
	{printf "\033[36m%-" recipe_max_length "s\033[0m %s\n", $$1, $$2}'
